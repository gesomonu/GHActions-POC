terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.66.0"
    }
  }
}
provider "aws" {
  region = "us-east-1"  # Specify your AWS region
}
# resource "aws_instance" "ec2" {
#   ami           = "ami-0e53db6fd757e38c7"  # Example AMI, change it to your AMI ID
#   instance_type = "t2.micro"
#   # User data script
#   user_data = <<-EOF
#               #!/bin/bash
#               # Install Apache Web Server
#               yum update -y
#               yum install -y httpd
#               systemctl start httpd
#               systemctl enable httpd
#               echo "Hello World from $(hostname -f)" > /var/www/html/index.html
#               EOF
#   tags = {
#     Name = "Tf-instance"
#   }
# }
resource "aws_ecr_repository" "myapplication" {
  name                 = "myapplication"
  image_tag_mutability = "MUTABLE"
}
resource "aws_ecs_cluster" "my_cluster" {
  name = "my-cluster"
}

resource "aws_ecs_task_definition" "my_task" {
  family                   = "myapplication"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"

  container_definitions = jsonencode([{
    name      = "myapplication"
    image     = "${aws_ecr_repository.myapplication.repository_url}:latest"
    essential = true
    portMappings = [{
      containerPort = 80
      hostPort      = 80
    }]
  }])
}
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "my_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_ecs_service" "my_service" {
  name            = "my-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.my_task.arn
  desired_count   = 1

  network_configuration {
    subnets          = [aws_subnet.my_subnet.id]
    security_groups  = [aws_security_group.my_sg.id]
    assign_public_ip = true
  }

  launch_type = "FARGATE"
}
